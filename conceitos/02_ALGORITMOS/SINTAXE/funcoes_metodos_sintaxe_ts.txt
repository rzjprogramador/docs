sintaxe_typescript: {

  funcoes_metodos: {

    em_classe: {
      sintaxe: `
        metodo( params) {} 
      `,

      exemplo: `
        exemplo:: const makeCreateUsersController = (): Controller => {}
      `,
    },

    em_funcional: {
      sintaxe: `
        const metodo = ( params?: Tipo? ): TipoRetornofuncao =>  { }
      `,

      exemplo: `
        exemplo:: const makeCreateUsersController = (): Controller => {}
      `,
    }
  

  },

  metodo_interface: {

    sintaxe: `metodo: (param: Tipo) => Promise<TipoRetorno> `,

    exemplo: `createUsers: (data: Users) => Promise<Users> `,
    
  },

  metodo_classe: {

    sintaxe: `async metodo(): Promise<TipoRetorno<OpcaoRetorno>> `,

    exemplo: `handle(): Promise<HttpResponse<CreateUsersViewModel>> `,

  }
}

funcao_que_retorna_objeto: {

  sintaxe: `
  export const NOME = (PARAM: TIPO): TIPO_RETORNO => ({
    PROP: VALOR,
    PROP2: VALOR
  })
  `,

  exemplo: `
  export const sucess = (data: any): HttpResponse => ({
    statusCode: 200,
    data
  })
  `,
}

funcao_anonima: {

  sintaxe: `
  // COM PARAM :: ALIMENTAR AS VARIAVEIS DENTRO DO CORPO
   export default(param: TipoParam): tipoRetornoFuncao => { ... }

  // SEM PARAM : SÃ“ EXECUTAR O CORPO
    export default () => { }

  `,

  exemplo: `
  export default(router: Router): void => { ... }
  //
  export default () => { }
`,
}