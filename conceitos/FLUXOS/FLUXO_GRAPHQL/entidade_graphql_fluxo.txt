{
  entidade_banco: {
    conceito: `
      criar a entidade no banco com os seus campos para esatr disponivel quando o repositorio precisar gravar os dados destes campos que o servico pedir a acada acao.
    `,

    acoes: `
      - 1 - criar a entidade no banco com o prisma::
      - com os mesmos campos da entidade definida em seu modulo entity para fazer um match de entidades : EntidadeBanco === EntidadeModulo
      --> fazer uma migracao (yarn prisma migrate dev) para criar e habilitar a entidade e versionar esta criacao no banco 
    `,
  },

  entidade_modulo: `
  2- criar a entidadeTS do modulo no padrao Statico com os campos que ela vai ter e seus campos para criacao`,

  caso_de_uso: {
    conceito: `acoes que a entidade podera fazer no sistema`,

    caso_de_uso_criacao: {
      contrato: `
        3- criar o repositorio de criacao :: com o contrato para criacao desta entidade.

        4 - com o contrato das acoes que esta entidade criada pode fazer exemplo: CRUD :: create(), list(), update(), findOne(), delete()
        `
    },

    implementar_contrato: `

      servico: {
        contexto: `IMPLEMENTA CONTRATO DO REPOSITORIO `,
        contem: `Tem o ContratoInternoRequest que é o contratoInterno com os campos para criacao da acao que serao recebidos para criar a acao no metodo execute()`
      }


      5- criar o servico que terá o metodo execute() que vai se apossar e usar um repositorio que sabe fazer a acaoObjetivo que precisa neste caso de uso.... e vai receber do ContratoInternoRequest o que precisa para criar a acao.

      obs: o respositorio vai acumular contrato de MUITAS ACOES
      mas a implemenatcao será um servico para cada acao.

    `,  
  },

  repositorio_banco: {
    conceito: `Agora com o servico criado preciso ter um repositorio que se comunica com o banco para gravar as acoes feitas no servico`,

    repositorio_banco: `
      6 - criar o Repositorio que vai se comunicar com o banco e gravar a s acoes feiats no servico::
      
      `
  }
}