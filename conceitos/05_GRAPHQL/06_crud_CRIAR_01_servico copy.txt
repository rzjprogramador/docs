crud_criar_com_prisma_via_servico = {

  metodo_decorador_classe_servico: `@Injectable`,
  
  tecnica: ``fast fail >> primeiro o erro depois sucesso : criar`,

  acesso_unico_ao_banco: `sempre importe o PrismaService instancia unica registrado no appRoot principal.`,

  no_servico: {

    metodo: 'create()',
    
    receber: {
      conceito: `create( sempre receber um objeto de solicitacao com os campos preenchidos há criar.`,
      sintaxe: `(data: EntidadeDTO)`,
    }
    
    

    receber_do_tipo:  {
      conceito: `declare como tipo DTO para estabelecer o que pode ser criado`,
      sintaxe: ``,
    }
    

    verificar:  {
      conceito: `faça antes da CRIACAO >> uma condificonal para verificar se ja existe o objetoTabelaModelo que quer utilizar- será um fail falha retorne uma excessao.`,

      logica: `
      // 2 -aplicando no objetoDoBanco .findFirst buscarPrimeiro({ onde: { a prop_unica é igual ao que tem o objt inteiroDoBanco data.prop_unica }})
      `,

      sintaxe: `
      // 1- aqui ja terá o obj que quer verificar
      //
      const <obj>Exists = await this.prisma.<objTabelaModel>.findFirst({
        where: {
          prop_unica: data.prop_unica
        }
      }) 

      if (objExists) // quer dizer que ja existe -- entao retorne uma excessao {
        throw new Error('<Entidade> já existe!')
      }
      
      // se passar daqui não existe -- ele vai criar a CRIACAO IMPLEMENTADA ABAIXO
      
      `,
    }
    

    responder_criacao:  {
      conceito: ` - caso nao existe CRIE que é o que propoem a funcao e devolva como resposta este objeto criado.
      - // data é todas informacoes que tem no objeto do banco
      - // retorna o objeto que foi capturado na tabela do banco
      `,

      sintaxe: ``,
      sintaxe: `const <objetoTabela> = this.prisma.<objetoTabela>create({
        data 
      })
      return <objetoTabela> 
      
      `,
    },
    
  }

  
}
