

contexto_longo: `
      CAPTURAR E EXTRAIR OBJETO DE RECEBIMENTOS POR PARAMS :
      // Estes decorators ja desempacotam a variavel do objeto e ficam prontas pra uso :

      @Args() --> no graphql
      @Params() --> no rest

      ao @Args() do graphql passamos no 2° param im obj com type function que mostra qual é este tipo de obj recebido ao graphql e fora dele maz ainda dentro da funcao passamos qual é este tipo pro Typescript.

      em qualquer lugar (class/args onde tiver campo) que precisa explicar mapear pro graphql o que é este tipo que ele nao entende passamos o type function

      Assim dentro do obj resolvedor da funcao podemos usar esta variavel recebida , manipulando e há devolvendo manipulada.

      obs: se forem muitos args a serem extraidos podemos criar uma classe DTO, com decoracao @ArgsType()  para disponibiliza os tipos destes campos a serem recebidos na solicitacao em um.unico objeto estilo DTO classe.

      E nestes campos posso decorar com class-validator

      tutorial : aos 3:30:00 ( https://youtu.be/fsqmbCMAC9s )
      ...
      @Fields()
      indica o tipo , e a prioridade requerida ou opcional
      - Mas com a integracao graph/Ts nao precisa para campos scalar primitivo ao menos os numeros e id.

      # class Validator validar DTO assim que for usar o DTO ja estara validado ???
      `,
      exemplo: `
      @Args('id', { type: () => String }) id: string,
      `,