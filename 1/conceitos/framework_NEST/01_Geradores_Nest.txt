# GERACOES
> Geracoes sempre na pasta DA ENTIDADE ONDE FICARÁ SUB-MODULO_CENTRALIZADOR DE CADA ENTIDADE
> NO MODULO PRINCIPAL DA APP REGISTRAR ESTES SUB-MODULOS SOMENTE.

> SINTAXE: nest g <GERAR> <ENTIDADE>
- exemplo: nest g module docker
> Module, Service, Controller gerar tudo na mesma pasta
> Registros no AppModule principal :: todos modulos tem que estar registrados lá em imports.
> E nos em cada modulo registrado seus servicos e controller
---

gerador_modulo_recursos_completo: {
  recursos_completos: {
    caminho: `Entrar na pasta da entidade e dar o comando apra criar os recursos completos`,
    comando: `nest g resource <ENTIDADE-RECURSO>`,
    registrar_modulo: `após instalar os recursos - entrar no appRootPrincipal e registrar em imports o modulo novo`
  }
  
}

# Gerar Modulo / Service / Controller / Model-TS Ligado ao graph
> em src/
```nest g module <ENTIDADE>```
```nest g service <ENTIDADE>```
```nest g controller <ENTIDADE>```

# IMPORTACOES NOS SUB-MODULOS
> Na entidade.module // Que levará todos para o principal por ser um sub-modulo centralizador
> em suas propriedades:

providers :: fica o Servico
controllers :: fica o Controlller

organizacao: {
  criar_modulo: `na src/ criar e move modulo da entidade para a pasta entities/ ele ja estará registro no app Root Principal`,

  servico_e_controle: `no console vá até esta pasta do modulo criado e movido e comece a criar nela o servico e controle que automaticamnete vai registra-lo neste modulo em uso. `

}

# REST
acao: Pegar recebimentos empacotados via http
tutorial: https://docs.nestjs.com/openapi/types-and-parameters#types-and-parameters
metodo: @Post
cenarios: [ @Body(), @Query() , @Param() ]

---
